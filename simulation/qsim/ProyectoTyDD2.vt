// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/12/2022 17:51:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Completo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Completo_vlg_sample_tst(
	areset,
	inclk0,
	N,
	sampler_tx
);
input  areset;
input  inclk0;
input  N;
output sampler_tx;

reg sample;
time current_time;
always @(areset or inclk0 or N)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Completo_vlg_check_tst (
	c0,
	LEDZ0,
	LEDZ1,
	LEDZ2,
	lock,
	Z0,
	Z1,
	Z2,
	sampler_rx
);
input  c0;
input  LEDZ0;
input  LEDZ1;
input  LEDZ2;
input  lock;
input  Z0;
input  Z1;
input  Z2;
input sampler_rx;

reg  c0_expected;
reg  LEDZ0_expected;
reg  LEDZ1_expected;
reg  LEDZ2_expected;
reg  lock_expected;
reg  Z0_expected;
reg  Z1_expected;
reg  Z2_expected;

reg  c0_prev;
reg  LEDZ0_prev;
reg  LEDZ1_prev;
reg  LEDZ2_prev;
reg  lock_prev;
reg  Z0_prev;
reg  Z1_prev;
reg  Z2_prev;

reg  c0_expected_prev;
reg  LEDZ0_expected_prev;
reg  LEDZ1_expected_prev;
reg  LEDZ2_expected_prev;
reg  lock_expected_prev;
reg  Z0_expected_prev;
reg  Z1_expected_prev;
reg  Z2_expected_prev;

reg  last_c0_exp;
reg  last_LEDZ0_exp;
reg  last_LEDZ1_exp;
reg  last_LEDZ2_exp;
reg  last_lock_exp;
reg  last_Z0_exp;
reg  last_Z1_exp;
reg  last_Z2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	c0_prev = c0;
	LEDZ0_prev = LEDZ0;
	LEDZ1_prev = LEDZ1;
	LEDZ2_prev = LEDZ2;
	lock_prev = lock;
	Z0_prev = Z0;
	Z1_prev = Z1;
	Z2_prev = Z2;
end

// update expected /o prevs

always @(trigger)
begin
	c0_expected_prev = c0_expected;
	LEDZ0_expected_prev = LEDZ0_expected;
	LEDZ1_expected_prev = LEDZ1_expected;
	LEDZ2_expected_prev = LEDZ2_expected;
	lock_expected_prev = lock_expected;
	Z0_expected_prev = Z0_expected;
	Z1_expected_prev = Z1_expected;
	Z2_expected_prev = Z2_expected;
end



// expected c0
initial
begin
	c0_expected = 1'bX;
end 

// expected LEDZ0
initial
begin
	LEDZ0_expected = 1'bX;
end 

// expected LEDZ1
initial
begin
	LEDZ1_expected = 1'bX;
end 

// expected LEDZ2
initial
begin
	LEDZ2_expected = 1'bX;
end 

// expected lock
initial
begin
	lock_expected = 1'bX;
end 

// expected Z0
initial
begin
	Z0_expected = 1'bX;
end 

// expected Z1
initial
begin
	Z1_expected = 1'bX;
end 

// expected Z2
initial
begin
	Z2_expected = 1'bX;
end 
// generate trigger
always @(c0_expected or c0 or LEDZ0_expected or LEDZ0 or LEDZ1_expected or LEDZ1 or LEDZ2_expected or LEDZ2 or lock_expected or lock or Z0_expected or Z0 or Z1_expected or Z1 or Z2_expected or Z2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c0 = %b | expected LEDZ0 = %b | expected LEDZ1 = %b | expected LEDZ2 = %b | expected lock = %b | expected Z0 = %b | expected Z1 = %b | expected Z2 = %b | ",c0_expected_prev,LEDZ0_expected_prev,LEDZ1_expected_prev,LEDZ2_expected_prev,lock_expected_prev,Z0_expected_prev,Z1_expected_prev,Z2_expected_prev);
	$display("| real c0 = %b | real LEDZ0 = %b | real LEDZ1 = %b | real LEDZ2 = %b | real lock = %b | real Z0 = %b | real Z1 = %b | real Z2 = %b | ",c0_prev,LEDZ0_prev,LEDZ1_prev,LEDZ2_prev,lock_prev,Z0_prev,Z1_prev,Z2_prev);
`endif
	if (
		( c0_expected_prev !== 1'bx ) && ( c0_prev !== c0_expected_prev )
		&& ((c0_expected_prev !== last_c0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c0_expected_prev);
		$display ("     Real value = %b", c0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c0_exp = c0_expected_prev;
	end
	if (
		( LEDZ0_expected_prev !== 1'bx ) && ( LEDZ0_prev !== LEDZ0_expected_prev )
		&& ((LEDZ0_expected_prev !== last_LEDZ0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDZ0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDZ0_expected_prev);
		$display ("     Real value = %b", LEDZ0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LEDZ0_exp = LEDZ0_expected_prev;
	end
	if (
		( LEDZ1_expected_prev !== 1'bx ) && ( LEDZ1_prev !== LEDZ1_expected_prev )
		&& ((LEDZ1_expected_prev !== last_LEDZ1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDZ1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDZ1_expected_prev);
		$display ("     Real value = %b", LEDZ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDZ1_exp = LEDZ1_expected_prev;
	end
	if (
		( LEDZ2_expected_prev !== 1'bx ) && ( LEDZ2_prev !== LEDZ2_expected_prev )
		&& ((LEDZ2_expected_prev !== last_LEDZ2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDZ2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDZ2_expected_prev);
		$display ("     Real value = %b", LEDZ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LEDZ2_exp = LEDZ2_expected_prev;
	end
	if (
		( lock_expected_prev !== 1'bx ) && ( lock_prev !== lock_expected_prev )
		&& ((lock_expected_prev !== last_lock_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lock :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lock_expected_prev);
		$display ("     Real value = %b", lock_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_lock_exp = lock_expected_prev;
	end
	if (
		( Z0_expected_prev !== 1'bx ) && ( Z0_prev !== Z0_expected_prev )
		&& ((Z0_expected_prev !== last_Z0_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z0_expected_prev);
		$display ("     Real value = %b", Z0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Z0_exp = Z0_expected_prev;
	end
	if (
		( Z1_expected_prev !== 1'bx ) && ( Z1_prev !== Z1_expected_prev )
		&& ((Z1_expected_prev !== last_Z1_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z1_expected_prev);
		$display ("     Real value = %b", Z1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Z1_exp = Z1_expected_prev;
	end
	if (
		( Z2_expected_prev !== 1'bx ) && ( Z2_prev !== Z2_expected_prev )
		&& ((Z2_expected_prev !== last_Z2_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z2_expected_prev);
		$display ("     Real value = %b", Z2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Z2_exp = Z2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Completo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg areset;
reg inclk0;
reg N;
// wires                                               
wire c0;
wire LEDZ0;
wire LEDZ1;
wire LEDZ2;
wire lock;
wire Z0;
wire Z1;
wire Z2;

wire sampler;                             

// assign statements (if any)                          
Completo i1 (
// port map - connection between master ports and signals/registers   
	.areset(areset),
	.c0(c0),
	.inclk0(inclk0),
	.LEDZ0(LEDZ0),
	.LEDZ1(LEDZ1),
	.LEDZ2(LEDZ2),
	.lock(lock),
	.N(N),
	.Z0(Z0),
	.Z1(Z1),
	.Z2(Z2)
);

// areset
initial
begin
	areset = 1'b0;
end 

// inclk0
always
begin
	inclk0 = 1'b0;
	inclk0 = #10000 1'b1;
	#10000;
end 

// N
initial
begin
	N = 1'b0;
	N = #20000 1'b1;
	N = #200000 1'b0;
	N = #50000 1'b1;
	N = #30000 1'b0;
	N = #50000 1'b1;
	N = #30000 1'b0;
	N = #90000 1'b1;
	N = #40000 1'b0;
end 

Completo_vlg_sample_tst tb_sample (
	.areset(areset),
	.inclk0(inclk0),
	.N(N),
	.sampler_tx(sampler)
);

Completo_vlg_check_tst tb_out(
	.c0(c0),
	.LEDZ0(LEDZ0),
	.LEDZ1(LEDZ1),
	.LEDZ2(LEDZ2),
	.lock(lock),
	.Z0(Z0),
	.Z1(Z1),
	.Z2(Z2),
	.sampler_rx(sampler)
);
endmodule

